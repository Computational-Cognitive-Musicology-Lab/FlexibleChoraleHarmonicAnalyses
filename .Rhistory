f <- rlang::new_function(!!args, !!subexpr)
Map(f, !!!fields)
})
}
}
nestedForms(quote(all(Chord$SeventhsResolve > 3)))
nestedForms <- function(expr) {
if (!is.call(expr)) return(expr)
if (deparse(expr[[1]]) %in% c('max', 'min', 'sum', 'all', 'any', 'mean')) {
fields <- findFields(expr)
subexpr <- parse(text = gsub('\\$', '.', deparse(expr[[2]])))
args <- setNames(alist(x = )[rep('x', length(fields))], fields)
rlang::quo({
f <- rlang::new_function(!!!args, !!subexpr)
Map(f, !!!fields)
})
}
}
nestedForms(quote(all(Chord$SeventhsResolve > 3)))
nestedForms <- function(expr) {
if (!is.call(expr)) return(expr)
if (deparse(expr[[1]]) %in% c('max', 'min', 'sum', 'all', 'any', 'mean')) {
fields <- findFields(expr)
subexpr <- parse(text = gsub('\\$', '.', deparse(expr[[2]])))
args <- setNames(alist(x = )[rep('x', length(fields))], fields)
rlang::quo({
f <- rlang::new_function(!!list(args), !!subexpr)
Map(f, !!!fields)
})
}
}
nestedForms(quote(all(Chord$SeventhsResolve > 3)))
nestedForms <- function(expr) {
if (!is.call(expr)) return(expr)
if (deparse(expr[[1]]) %in% c('max', 'min', 'sum', 'all', 'any', 'mean')) {
fields <- findFields(expr)
subexpr <- parse(text = gsub('\\$', '.', deparse(expr[[2]])))
args <- setNames(alist(x = )[rep('x', length(fields))], fields)
rlang::quo({
f <- rlang::new_function(!!list(args), !!subexpr)
Map(f, !!!rlang::syms(fields))
})
}
}
nestedForms(quote(all(Chord$SeventhsResolve > 3)))
nestedForms <- function(expr) {
if (!is.call(expr)) return(expr)
if (deparse(expr[[1]]) %in% c('max', 'min', 'sum', 'all', 'any', 'mean')) {
fields <- findFields(expr)
subexpr <- parse(text = gsub('\\$', '.', deparse(expr[[2]])))
args <- setNames(alist(x = )[rep('x', length(fields))], fields)
rlang::quo({
f <- rlang::new_function(list(a=2), !!subexpr)
Map(f, !!!rlang::syms(fields))
})
}
}
nestedForms(quote(all(Chord$SeventhsResolve > 3)))
nestedForms <- function(expr) {
if (!is.call(expr)) return(expr)
if (deparse(expr[[1]]) %in% c('max', 'min', 'sum', 'all', 'any', 'mean')) {
fields <- findFields(expr)
subexpr <- parse(text = gsub('\\$', '.', deparse(expr[[2]])))
args <- setNames(alist(x = )[rep('x', length(fields))], fields)
rlang::quo({
f <- rlang::new_function(list(a=2), (!!expr[[1]])(!!subexpr))
Map(f, !!!rlang::syms(fields))
})
}
}
nestedForms(quote(all(Chord$SeventhsResolve > 3)))
nestedForms <- function(expr) {
if (!is.call(expr)) return(expr)
if (deparse(expr[[1]]) %in% c('max', 'min', 'sum', 'all', 'any', 'mean')) {
fields <- findFields(expr)
subexpr <- parse(text = gsub('\\$', '.', deparse(expr[[2]])))[[1]]
args <- setNames(alist(x = )[rep('x', length(fields))], fields)
rlang::quo({
f <- rlang::new_function(list(a=2), (!!expr[[1]])(!!subexpr))
Map(f, !!!rlang::syms(fields))
})
}
}
nestedForms(quote(all(Chord$SeventhsResolve > 3)))
rlang::new_function(alist(x=), x + 2)
rlang::new_function(alist(x=), quo(x + 2))
rlang::new_function(alist(x=), x + 2)
rlang::new_function(alist(x=2), x + 2)
rlang::new_function(alist(x=), quote(x + 2))
nestedForms <- function(expr) {
if (!is.call(expr)) return(expr)
if (deparse(expr[[1]]) %in% c('max', 'min', 'sum', 'all', 'any', 'mean')) {
fields <- findFields(expr)
subexpr <- parse(text = gsub('\\$', '.', deparse(expr[[2]])))[[1]]
args <- setNames(alist(x = )[rep('x', length(fields))], fields)
rlang::quo({
f <- rlang::new_function(!!args, (!!expr[[1]])(!!subexpr))
Map(f, !!!rlang::syms(fields))
})
}
}
rlang::new_function(alist(x=), quote(x + 2))
nestedForms(quote(all(Chord$SeventhsResolve > 3)))
nestedForms <- function(expr) {
if (!is.call(expr)) return(expr)
if (deparse(expr[[1]]) %in% c('max', 'min', 'sum', 'all', 'any', 'mean')) {
fields <- findFields(expr)
subexpr <- parse(text = gsub('\\$', '.', deparse(expr[[2]])))[[1]]
args <- setNames(alist(x = )[rep('x', length(fields))], fields)
rlang::quo({
f <- rlang::new_function(list(!!!args), (!!expr[[1]])(!!subexpr))
Map(f, !!!rlang::syms(fields))
})
}
}
nestedForms(quote(all(Chord$SeventhsResolve > 3)))
rlang::new_function('x', quote(x+2))
rlang::new_function('x'=, quote(x+2))
rlang::new_function(alist(x=), quote(x+2))
nestedForms <- function(expr) {
if (!is.call(expr)) return(expr)
if (deparse(expr[[1]]) %in% c('max', 'min', 'sum', 'all', 'any', 'mean')) {
fields <- findFields(expr)
subexpr <- parse(text = gsub('\\$', '.', deparse(expr[[2]])))[[1]]
args <- setNames(alist(x = )[rep('x', length(fields))], fields)
rlang::quo({
f <- rlang::new_function(alist(!!!args), (!!expr[[1]])(!!subexpr))
Map(f, !!!rlang::syms(fields))
})
}
}
nestedForms(quote(all(Chord$SeventhsResolve > 3)))
eval_tidy(nestedForms(quote(all(Chord$SeventhsResolve > 3))))
Chord <- ChoraleAnalyses$Chord
eval_tidy(nestedForms(quote(all(Chord$SeventhsResolve > 3))))
nestedForms <- function(expr) {
if (!is.call(expr)) return(expr)
if (deparse(expr[[1]]) %in% c('max', 'min', 'sum', 'all', 'any', 'mean')) {
fields <- findFields(expr)
subexpr <- parse(text = gsub('\\$', '.', deparse(expr[[2]])))[[1]]
args <- setNames(alist(x = )[rep('x', length(fields))], parse(text = gsub('\\$', '.', deparse(fields)))[[1]])
rlang::quo({
f <- rlang::new_function(alist(!!!args), (!!expr[[1]])(!!subexpr))
Map(f, !!!rlang::syms(fields))
})
}
}
eval_tidy(nestedForms(quote(all(Chord$SeventhsResolve > 3))))
nestedForms <- function(expr) {
if (!is.call(expr)) return(expr)
if (deparse(expr[[1]]) %in% c('max', 'min', 'sum', 'all', 'any', 'mean')) {
fields <- findFields(expr)
subexpr <- parse(text = gsub('\\$', '.', deparse(expr[[2]])))[[1]]
args <- setNames(alist(x = )[rep('x', length(fields))], gsub('\\$', '.', fields))
rlang::quo({
f <- rlang::new_function(alist(!!!args), (!!expr[[1]])(!!subexpr))
Map(f, !!!rlang::syms(fields))
})
}
}
eval_tidy(nestedForms(quote(all(Chord$SeventhsResolve > 3))))
nestedForms(quote(all(Chord$SeventhsResolve > 3)))
nestedForms <- function(expr) {
if (!is.call(expr)) return(expr)
if (deparse(expr[[1]]) %in% c('max', 'min', 'sum', 'all', 'any', 'mean')) {
fields <- findFields(expr)
subexpr <- parse(text = gsub('\\$', '.', deparse(expr[[2]])))[[1]]
args <- setNames(alist(x = )[rep('x', length(fields))], gsub('\\$', '.', fields))
rlang::expr({
f <- rlang::new_function(alist(!!!args), (!!expr[[1]])(!!subexpr))
Map(f, !!!rlang::syms(fields))
})
}
}
nestedForms(quote(all(Chord$SeventhsResolve > 3)))
nestedForms <- function(expr) {
if (!is.call(expr)) return(expr)
if (deparse(expr[[1]]) %in% c('max', 'min', 'sum', 'all', 'any', 'mean')) {
fields <- findFields(expr)
subexpr <- parse(text = gsub('\\$', '.', deparse(expr[[2]])))[[1]]
args <- setNames(alist(x = )[rep('x', length(fields))], gsub('\\$', '.', fields))
rlang::expr({
f <- rlang::new_function(alist(!!!args), {(!!expr[[1]])(!!subexpr)})
Map(f, !!!rlang::syms(fields))
})
}
}
nestedForms(quote(all(Chord$SeventhsResolve > 3)))
Chord$SeventhsResolve
nestedForms(quote(all(Chord$SeventhsResolve > 3)))
nestedForms(quote(all(Chord$SeventhsResolve > 3)))
eval(nestedForms(quote(all(Chord$SeventhsResolve > 3))))
nestedForms <- function(expr) {
if (!is.call(expr)) return(expr)
if (deparse(expr[[1]]) %in% c('max', 'min', 'sum', 'all', 'any', 'mean')) {
fields <- findFields(expr)
subexpr <- parse(text = gsub('\\$', '.', deparse(expr[[2]])))[[1]]
args <- setNames(alist(x = )[rep('x', length(fields))], gsub('\\$', '.', fields))
rlang::expr({
f <- rlang::new_function(alist(!!!args), {(!!expr[[1]])(!!subexpr)}, environment=environment())
Map(f, !!!rlang::syms(fields))
})
}
}
eval(nestedForms(quote(all(Chord$SeventhsResolve > 3))))
nestedForms <- function(expr) {
if (!is.call(expr)) return(expr)
if (deparse(expr[[1]]) %in% c('max', 'min', 'sum', 'all', 'any', 'mean')) {
fields <- findFields(expr)
subexpr <- parse(text = gsub('\\$', '.', deparse(expr[[2]])))[[1]]
args <- setNames(alist(x = )[rep('x', length(fields))], gsub('\\$', '.', fields))
rlang::expr({
f <- rlang::new_function(alist(!!!args), {(!!expr[[1]])(!!subexpr)}, envir=environment())
Map(f, !!!rlang::syms(fields))
})
}
}
eval(nestedForms(quote(all(Chord$SeventhsResolve > 3))))
nestedForms <- function(expr) {
if (!is.call(expr)) return(expr)
if (deparse(expr[[1]]) %in% c('max', 'min', 'sum', 'all', 'any', 'mean')) {
fields <- findFields(expr)
subexpr <- parse(text = gsub('\\$', '.', deparse(expr[[2]])))[[1]]
args <- setNames(alist(x = )[rep('x', length(fields))], gsub('\\$', '.', fields))
rlang::expr({
f <- rlang::new_function(alist(!!!args), {(!!expr[[1]])(!!subexpr)}, env = environment())
Map(f, !!!rlang::syms(fields))
})
}
}
eval(nestedForms(quote(all(Chord$SeventhsResolve > 3))))
nestedForms <- function(expr) {
if (!is.call(expr)) return(expr)
if (deparse(expr[[1]]) %in% c('max', 'min', 'sum', 'all', 'any', 'mean')) {
fields <- findFields(expr)
subexpr <- parse(text = gsub('\\$', '.', deparse(expr[[2]])))[[1]]
args <- setNames(alist(x = )[rep('x', length(fields))], gsub('\\$', '.', fields))
rlang::expr({
f <- rlang::new_function(alist(!!!args), {quote((!!expr[[1]])(!!subexpr))}, env = environment())
Map(f, !!!rlang::syms(fields))
})
}
}
eval(nestedForms(quote(all(Chord$SeventhsResolve > 3))))
(nestedForms(quote(all(Chord$SeventhsResolve > 3))))
nestedForms <- function(expr) {
if (!is.call(expr)) return(expr)
if (deparse(expr[[1]]) %in% c('max', 'min', 'sum', 'all', 'any', 'mean')) {
fields <- findFields(expr)
subexpr <- parse(text = gsub('\\$', '.', deparse(expr[[2]])))[[1]]
args <- setNames(alist(x = )[rep('x', length(fields))], gsub('\\$', '.', fields))
rlang::expr({
f <- rlang::new_function(alist(!!!args), {!!quote((expr[[1]])(!!subexpr))}, env = environment())
Map(f, !!!rlang::syms(fields))
})
}
}
(nestedForms(quote(all(Chord$SeventhsResolve > 3))))
nestedForms <- function(expr) {
if (!is.call(expr)) return(expr)
if (deparse(expr[[1]]) %in% c('max', 'min', 'sum', 'all', 'any', 'mean')) {
fields <- findFields(expr)
subexpr <- parse(text = gsub('\\$', '.', deparse(expr[[2]])))[[1]]
args <- setNames(alist(x = )[rep('x', length(fields))], gsub('\\$', '.', fields))
rlang::expr({
f <- rlang::new_function(alist(!!!args), {!!quote((!!expr[[1]])(!!subexpr))}, env = environment())
Map(f, !!!rlang::syms(fields))
})
}
}
(nestedForms(quote(all(Chord$SeventhsResolve > 3))))
nestedForms <- function(expr) {
if (!is.call(expr)) return(expr)
if (deparse(expr[[1]]) %in% c('max', 'min', 'sum', 'all', 'any', 'mean')) {
fields <- findFields(expr)
subexpr <- parse(text = gsub('\\$', '.', deparse(expr[[2]])))[[1]]
args <- setNames(alist(x = )[rep('x', length(fields))], gsub('\\$', '.', fields))
rlang::expr({
f <- rlang::new_function(alist(!!!args), {quote((!!expr[[1]])(!!subexpr))}, env = environment())
Map(f, !!!rlang::syms(fields))
})
}
}
(nestedForms(quote(all(Chord$SeventhsResolve > 3))))
nestedForms <- function(expr) {
if (!is.call(expr)) return(expr)
if (deparse(expr[[1]]) %in% c('max', 'min', 'sum', 'all', 'any', 'mean')) {
fields <- findFields(expr)
subexpr <- parse(text = gsub('\\$', '.', deparse(expr[[2]])))[[1]]
args <- setNames(alist(x = )[rep('x', length(fields))], gsub('\\$', '.', fields))
rlang::expr({
f <- rlang::new_function(alist(!!!args), quote({(!!expr[[1]])(!!subexpr)}), env = environment())
Map(f, !!!rlang::syms(fields))
})
}
}
(nestedForms(quote(all(Chord$SeventhsResolve > 3))))
eval(nestedForms(quote(all(Chord$SeventhsResolve > 3))))
Chord$SeventhsResolve
nestedForms <- function(expr) {
if (!is.call(expr)) return(expr)
if (deparse(expr[[1]]) %in% c('max', 'min', 'sum', 'all', 'any', 'mean')) {
fields <- findFields(expr)
subexpr <- parse(text = gsub('\\$', '.', deparse(expr[[2]])))[[1]]
args <- setNames(alist(x = )[rep('x', length(fields))], gsub('\\$', '.', fields))
rlang::expr({
f <- rlang::new_function(alist(!!!args), quote({(!!expr[[1]])(!!subexpr)}))
Map(f, !!!rlang::syms(fields))
})
}
}
eval(nestedForms(quote(all(Chord$SeventhsResolve > 3))))
nestedForms <- function(expr) {
if (!is.call(expr)) return(expr)
if (deparse(expr[[1]]) %in% c('max', 'min', 'sum', 'all', 'any', 'mean')) {
fields <- findFields(expr)
subexpr <- parse(text = gsub('\\$', '.', deparse(expr[[2]])))[[1]]
args <- setNames(alist(x = )[rep('x', length(fields))], gsub('\\$', '.', fields))
rlang::expr({
f <- rlang::new_function(alist(!!!args), quote({(!!expr[[1]])(!!subexpr)}), env = ChoraleAnalyses)
Map(f, !!!rlang::syms(fields))
})
}
}
eval(nestedForms(quote(all(Chord$SeventhsResolve > 3))))
nestedForms <- function(expr) {
if (!is.call(expr)) return(expr)
if (deparse(expr[[1]]) %in% c('max', 'min', 'sum', 'all', 'any', 'mean')) {
fields <- findFields(expr)
subexpr <- parse(text = gsub('\\$', '.', deparse(expr[[2]])))[[1]]
args <- setNames(alist(x = )[rep('x', length(fields))], gsub('\\$', '.', fields))
rlang::expr({
f <- rlang::new_function(alist(!!!args), quote({(!!expr[[1]])(!!subexpr)}))
Map(f, !!!rlang::syms(fields))
})
}
}
eval(nestedForms(quote(all(Chord$SeventhsResolve > 3))))
nestedForms(quote(all(Chord$SeventhsResolve > 3)))
nestedForms <- function(expr) {
if (!is.call(expr)) return(expr)
if (deparse(expr[[1]]) %in% c('max', 'min', 'sum', 'all', 'any', 'mean')) {
fields <- findFields(expr)
subexpr <- parse(text = gsub('\\$', '.', deparse(expr[[2]])))[[1]]
args <- setNames(alist(x = )[rep('x', length(fields))], gsub('\\$', '.', fields))
rlang::expr({
f <- rlang::new_function(alist(!!!args), quote({(!!expr[[1]])(!!subexpr)}))
Map(f, !!!parse(text=fields))
})
}
}
nestedForms(quote(all(Chord$SeventhsResolve > 3)))
nestedForms <- function(expr) {
if (!is.call(expr)) return(expr)
if (deparse(expr[[1]]) %in% c('max', 'min', 'sum', 'all', 'any', 'mean')) {
fields <- findFields(expr)
subexpr <- parse(text = gsub('\\$', '.', deparse(expr[[2]])))[[1]]
args <- setNames(alist(x = )[rep('x', length(fields))], gsub('\\$', '.', fields))
rlang::expr({
f <- rlang::new_function(alist(!!!args), quote({(!!expr[[1]])(!!subexpr)}))
Map(f, !!!rlang::parse_exprs(fields))
})
}
}
nestedForms(quote(all(Chord$SeventhsResolve > 3)))
eval(nestedForms(quote(all(Chord$SeventhsResolve > 3))))
nestedForms <- function(expr) {
if (!is.call(expr)) return(expr)
if (deparse(expr[[1]]) %in% c('max', 'min', 'sum', 'all', 'any', 'mean')) {
fields <- findFields(expr)
subexpr <- parse(text = gsub('\\$', '.', deparse(expr[[2]])))[[1]]
args <- setNames(alist(x = )[rep('x', length(fields))], gsub('\\$', '.', fields))
rlang::expr({
f <- rlang::new_function(alist(!!!args), quote({(!!expr[[1]])(!!subexpr)}))
unlist(Map(f, !!!rlang::parse_exprs(fields)))
})
}
}
eval(nestedForms(quote(all(Chord$SeventhsResolve > 3))))
nestedForms <- function(expr) {
if (!is.call(expr)) return(expr)
if (deparse(expr[[1]]) %in% c('max', 'min', 'sum', 'all', 'any', 'mean')) {
fields <- findFields(expr)
subexpr <- parse(text = gsub('\\$', '.', deparse(expr[[2]])))[[1]]
args <- setNames(alist(x = )[rep('x', length(fields))], gsub('\\$', '.', fields))
rlang::expr({
f <- rlang::new_function(alist(!!!args), quote({(!!expr[[1]])(!!subexpr, na.rm = TRUE)}))
unlist(Map(f, !!!rlang::parse_exprs(fields)))
})
}
}
eval(nestedForms(quote(all(Chord$SeventhsResolve > 3))))
eval(nestedForms(quote(any(Chord$SeventhsResolve > 3))))
eval(nestedForms(quote(max(Chord$SeventhsResolve > 3))))
eval(nestedForms(quote(max(Chord$SeventhsResolve ))))
nestedForms(quote(max(Chord$SeventhsResolve)))
nestedForms(quote(max(Chord$Count)))
eval(nestedForms(quote(max(Chord$Count))))
eval(nestedForms(quote(min(Chord$Count))))
library(FlexibleChoraleHarmonicAnalysis)
FlexibleChoraleHarmonicAnalysis:::parseFormulae(list(~any(Chord$Count > 3)))
FlexibleChoraleHarmonicAnalysis:::parseFormulae(list(~any(Chord$Count > 3))) -> z
class(z)
z[[1]]
FlexibleChoraleHarmonicAnalysis:::parseFormulae(list(~any(Chord$Count > 3)))
form
Q
library(FlexibleChoraleHarmonicAnalysis)
analyzeChorales(list(~Chord$Count))
analyzeChorales(list(~Chord$Count))
class(form)
corm
form
rlang::f_rhs(form)
library(FlexibleChoraleHarmonicAnalysis)
analyzeChorales(list(~Chord$Count))
analyzeChorales(list(~Chord$Count))
rlang::f_rhs(form)
class(form)
rlang::f_lhs(form)
analyzeChorales(list(~Chord$Count))
library(FlexibleChoraleHarmonicAnalysis)
analyzeChorales(list(~Chord$Count))
analyzeChorales(list(~Chord$Count))
rlang::f_rhs(form)
analyzeChorales(list(~any(Chord$SeventhsResolve))
analyzeChorales(list(~any(Chord$SeventhsResolve)))
rlang::f_rhs(form)
analyzeChorales(list(~all(Chord$SeventhsResolve & Chord$Qualities == 'Mm')))
rlang::f_rhs(form)
library(FlexibleChoraleHarmonicAnalysis)
analyzeChorales(list(~all(Chord$SeventhsResolve & Chord$Qualities == 'Mm')))
rlang::f_rhs(form)
library(FlexibleChoraleHarmonicAnalysis)
analyzeChorales(list(~all(Chord$SeventhsResolve & Chord$Qualities == 'Mm')))
rlang::f_rhs(form)
rlang::new_function(list(A,B), quote(A+B))
rlang::new_function(list(quote(A),quote(B)), quote(A+B))
rlang::new_function(list(A=,B=), quote(A+B))
ranks <- function(...) {
list(...)
}
ranks(1=23)
ranks('1'=23)
ranks('M|Mm|mm|=1)
ranks('M|Mm|mm'=1)
ranks <- function(x, ...) {
patterns <- list(...)
output <- rep(NA, length(x))
for (i in 1:length(patterns)){
output[grepl(names(patterns)[i], x)] <- patterns[i]
}
output
}
ranks(c("M",'mm','mm','mM'), 'M|mm' = 2, 'mM'=1)
ranks <- function(x, ...) {
patterns <- list(...)
output <- rep(NA, length(x))
for (i in 1:length(patterns)){
output[grepl(names(patterns)[i], x)] <- patterns[[i]]
}
output
}
ranks(c("M",'mm','mm','mM'), 'M|mm' = 2, 'mM'=1)
ranks <- function(x, patterns = c('M|m|d|Mm' = 3, 'mm|MM' = 2), nomatch = 1) {
output <- rep(nomatch, length(x))
for (i in 1:length(patterns)){
output[grepl(names(patterns)[i], x)] <- patterns[[i]]
}
output
}
ranks(c("M",'mm','mm','mM'), 'M|mm' = 2, 'mM'=1)
ranks(c("M",'mm','mm','mM'), c('M|mm'=2, 'Mm'=1))
ranks(c("M",'mm','mm','mM'), c('M|mm'=2, 'mM'=1))
ranks(c("M",'mm','mm','mM','d'), c('M|mm'=2, 'mM'=1))
strsplit('a|v', split = '\\|')
sapply(c('a','b'), grepl, letters)
sapply(c('a','b'), grepl, x=letters)
sapply(c('a'), grepl, x=letters)
sapply(c(), grepl, x=letters)
sapply(c('a'), grepl, x=letters)
rowSums(sapply(c('a'), grepl, x=letters)) > 0
analyzeChorales(list(~ ranks(Qualities, 'M|m'=4, 'd|Mm'=3, 'mm|MM' = 2, 'dm|dd'=1), ~mean(Chord$SeventhsResolve) ))
analyzeChorales(list(~ ranks(Qualities, c('M|m'=4, 'd|Mm'=3, 'mm|MM' = 2, 'dm|dd'=1)), ~mean(Chord$SeventhsResolve) ))
analyzeChorales(list(~ mean(ranks(Chord$Qualities, c('M|m'=4, 'd|Mm'=3, 'mm|MM' = 2, 'dm|dd'=1))), ~mean(Chord$SeventhsResolve) ))
library(FlexibleChoraleHarmonicAnalysis)
analyzeChorales(list(~ mean(ranks(Chord$Qualities, c('M|m'=4, 'd|Mm'=3, 'mm|MM' = 2, 'dm|dd'=1))), ~mean(Chord$SeventhsResolve) ))
analyzeChorales(list(~ mean(ranks(Chord$Qualities, c('M|m'=4, 'd|Mm'=3, 'mm|MM' = 2, 'dm|dd'=1))), ~mean(Chord$SeventhsResolve) ))
fields
subexpr
args
rlang::expr({
f <- rlang::new_function(list(!!!args), quote({(!!expr[[1]])(!!subexpr, na.rm = TRUE)}))
unlist(Map(f, !!!rlang::parse_exprs(fields)))
})
library(FlexibleChoraleHarmonicAnalysis)
analyzeChorales(list(~ mean(ranks(Chord$Qualities, c('M|m'=4, 'd|Mm'=3, 'mm|MM' = 2, 'dm|dd'=1))), ~mean(Chord$SeventhsResolve) ))
analyzeChorales(list(~ mean(ranks(Chord$Qualities, c('M|m'=4, 'd|Mm'=3, 'mm|MM' = 2, 'dm|dd'=1))), ~mean(Chord$SeventhsResolve) ))
library(FlexibleChoraleHarmonicAnalysis)
analyzeChorales(list(~ mean(ranks(Chord$Qualities, c('M|m'=4, 'd|Mm'=3, 'mm|MM' = 2, 'dm|dd'=1))), ~mean(Chord$SeventhsResolve) ))
analyzeChorales(list(~ mean(ranks(Chord$Qualities, c('M|m'=4, 'd|Mm'=3, 'mm|MM' = 2, 'dm|dd'=1))), ~mean(Chord$SeventhsResolve) ))
curpats
(sapply(pats[[i]], grepl, x = x)
)
library(FlexibleChoraleHarmonicAnalysis)
analyzeChorales(list(~ mean(ranks(Chord$Qualities, c('M|m'=4, 'd|Mm'=3, 'mm|MM' = 2, 'dm|dd'=1))), ~mean(Chord$SeventhsResolve) ))
analyzeChorales(list(~ mean(ranks(Chord$Qualities, c('M|m'=4, 'd|Mm'=3, 'mm|MM' = 2, 'dm|dd'=1))), ~mean(Chord$SeventhsResolve) )) -> x
viewHumdrum(x)
viewHumdrum(analyses = x)
analyzeChorales(list(~ mean(ranks(Chord$Qualities, c('M|m'=1, 'd|Mm'=2, 'mm|MM' = 3, 'dm|dd'=4))), ~mean(Chord$SeventhsResolve) )) -> x
viewHumdrum(analyses = x)
devtools::document()
