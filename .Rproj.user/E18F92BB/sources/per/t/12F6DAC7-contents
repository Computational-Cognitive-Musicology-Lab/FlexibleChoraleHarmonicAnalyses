



#' Align analyses with humdrum data.
#'
#' This function takes one or more harmonic analyses
#' (output by \code{\link{selectAnalyses}}) and aligns them with the appropriate humdrum
#' data.
#' @param analyses A list of analyses output by xxx.
#'
#' @return A list of character vectors, with each element of each vector
#' being a single record in a humdrum file.
#' @export
generateHumdrum <- function(analyses) {}

#' Write annotated humdrum data to files
#'
#' This function writes new humdrum data (original **kern with added harmonic
#' analyses), to text files. The original krn file names are used, with the addition of
#' the word "annotated," a optional label specified by the user, and a different extension (\code{.hum}).
#'
#' @param files A list of vectors representing humdrum files
#'  (output by \code{\link{generateHudrum}}).
#' @param label A character string to append to each filename.
#' Defaults to NULL. Use this to differentiate different batches
#' of analyses you generate.
#'
#' @return NULL
#' @export
writeHumdrum <- function(x) {}


#' Send a humdrum file to the Verovio Humdrum Viewer
#'
#' This function sends an annotated humdrum data file (generated by
#' \code{\link{generateHumdrum}}) to the \href{https://verovio.humdrum.org/}{Verovio Humdrum Viewer}.
#'
#' @param analyses A list of analyses.
#' @param composer A character string: either "Bach" or "Praetorius" (inexact matches are allowed).
#' @param number An integer in the range 1--371 (for Bach) or 1--200 (for Praetorious).
#'
#' @return NULL
#'
#' @export
showHumdrum <- function(analyses = list(), composer = 'Bach', number = 1) {
  filename



}



# generateHumdrum <- function(filename, chords) {
#
#
#           basename <- filename %str-% '^Data/' %str-% '\\.dat$'
#
#           krnfile <- if (grepl('chor', filename))
#                     '~/Bridge/Research/Data/Humdrum/Kern/JSBach/371chorales/' %str+% basename %str+% '.krn'
#           else
#                     '~/Bridge/Research/Data/Praetorius/Krn/' %str+% basename %str+% '.krn'
#
#           krnfile <- readLines(krnfile)
#
#           #get rid of non kern spines
#           krnmat <- stri_list2matrix(strsplit(krnfile[!grepl('^!!', krnfile)], split = '\t'))
#           krnmat <- krnmat[krnmat[,1] == '**kern',]
#           krnfile[!grepl('^!!', krnfile)] <- apply(krnmat, 2, paste, collapse = '\t')
#
#           records <- Data$Record[Data$FileName == filename]
#
#           # account for reference records
#           ref <- grepl('^!!!', krnfile)
#           ref <- ref[1:(which(!ref)[1] - 1)] # only at beginning of file
#           offset <- sum(ref) - {if (grepl('chor', filename)) 6 else 2}
#           records <- records + offset
#
#           ###################
#           harmRh <-  Data$harmRhythm[Data$FileName == filename]
#
#
#
#
#           ###
#           outfile <- krnfile
#
#           for (i in 1:length(chords)) {
#                     chords  <- chords[[1]][Data$FileName == filename]
#                     chords[chords == rotate(chords) & !harmRh] <- '.'
#
#                     chords <- gsub('Mm', '7', chords)
#                     chords <- gsub('MM', '^7', chords)
#                     chords <- gsub('mm', '_7', chords)
#                     chords <- gsub('dm', 'o7', chords)
#                     chords <- gsub('dd', 'oo7', chords)
#                     chords <- gsub('M', '', chords)
#                     chords[grep('d', chords)] <- tolower(gsub('d{1}', 'o', chords[grep('d', chords)]))
#                     chords[grep('m', chords)] <- tolower(gsub('m{1}', '', chords[grep('m', chords)]))
#                     chords[grep('-', chords)] <- gsub('-', 'b',  chords[grep('-', chords)])
#                     chords <- gsub('_7', 'm7', chords)
#                     chords[chords == rotate(chords)] <- '.'
#                     #
#                     harmRh <- c('.', '|')[1 + harmRh]
#
#
#
#
#                     outfile[records] <- krnfile[records] %str+% '\t' %str+% chords %str+% '\t' %str+% harmRh
#
#                     outfile[grep('^\\*\\*', krnfile)] <- outfile[grep('^\\*\\*', krnfile)] %str+% '\t**text\t**text'
#                     outfile[grep('^\\*[^*]', krnfile)] <- outfile[grep('^\\*[^*]', krnfile)] %str+% '\t*\t*'
#                     outfile[grep('^\\*-\t', krnfile)] <-  krnfile[grep('^\\*-\t', krnfile)] %str+% '\t*-\t*-'
#
#                     outfile[grep('^![^!]', krnfile)] <- outfile[grep('^![^!]', krnfile)] %str+% '\t!\t!'
#                     outfile[grep('=', krnfile)] <- outfile[grep('^=', krnfile)] %str+% (('\t' %str+% (outfile[grep('^=', krnfile)] %strkeep% '^=[^\t]*')) %str*% 2)
#
#                     #all rest records:
#                     outfile[grepl('^[^!=*]', outfile) & !grepl('[A-Ga-g]', outfile)] <- outfile[grepl('^[^!=*]', outfile) & !grepl('[A-Ga-g]', outfile)] %str+% '\t.\t.'
#
#                     outfile[!grepl('^!!!', outfile)] <- sapply(outfile[!grepl('^!!!', outfile)],
#                                                                function(rec) {
#                                                                          rec <- rec %str/% '\t'
#
#                                                                          chord <- rec[length(rec) -1]
#                                                                          rhy <- rec[length(rec)]
#
#                                                                          notes <- rec[1:(length(rec) - 2)]
#
#                                                                          rec <- c(notes[1], chord, notes[2], rhy, notes[-1:-2])
#                                                                          paste(rec, collapse = '\t')
#                                                                })
#
#           }
#
#           writeLines(outfile, con = 'Data/Chords/' %str+% basename %str+% '.krn')
#
#
#
# }
#
#
